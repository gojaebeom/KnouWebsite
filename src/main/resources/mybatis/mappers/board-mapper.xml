<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board">	
	<resultMap type="kr.ac.knou.dto.board.Board" id="boardResult">
	    <result column="id" property="id"/>
	    <result column="writer_id" property="writerId"/>
	    <result column="title" property="title"/>
	    <result column="content" property="content"/>
	    <result column="created_at" property="createdAt"/>
	    <result column="hit" property="hit"/>
	    <result column="like_cnt" property="likeCnt"/>
	    <result column="comment_cnt" property="commentCnt"/>
	    <collection property="user" resultMap="userResult"/>
	    <collection property="like" resultMap="likeResult"/>
	</resultMap>
	 
	<resultMap type="kr.ac.knou.dto.user.User" id="userResult">
	    <result column="id" property="id"/>
	    <result column="email" property="email"/>
	    <result column="password" property="password"/>
	    <result column="nickname" property="nickname"/>
	    <result column="image" property="image"/>
	</resultMap>
	
	<resultMap type="kr.ac.knou.dto.like.Like" id="likeResult">
	    <result column="id" property="id"/>
		<result column="board_id" property="boardId"/>
		<result column="user_id" property="userId"/>
	</resultMap>
	
	<select id="selectBoards" resultMap="boardResult">
		SELECT 
			B.ID,
			B.TITLE,
			B.WRITER_ID,
			B.CREATED_AT, 
			B.UPDATED_AT,
			U.NICKNAME, 
			B.COMMENT_CNT, 
			B.LIKE_CNT,
			B.HIT
		FROM BOARDS B
		LEFT OUTER JOIN USERS U ON B.WRITER_ID = U.ID
		WHERE 
			U.NICKNAME like '%${query}%' OR B.TITLE like '%${query}%'
		ORDER BY 
			CREATED_AT DESC
		LIMIT ${page}, 5;
	</select>
	
	<select id="selectBoardForId" resultMap="boardResult">
		SELECT 
			B.ID, 
			B.TITLE, 
			B.CONTENT, 
			B.HIT, 
			B.COMMENT_CNT, 
			B.LIKE_CNT,
			B.WRITER_ID, 
			B.CREATED_AT, 
			U.NICKNAME, 
			U.IMAGE
		FROM BOARDS B
		LEFT OUTER JOIN USERS U ON B.WRITER_ID = U.ID
		WHERE 
			B.ID = #{id};
	</select>
	
	<select id="selectBoardsForUserId" resultMap="boardResult">
		SELECT 
			B.ID,
			B.TITLE,
			B.CREATED_AT, 
			U.NICKNAME, 
			B.COMMENT_CNT, 
			B.LIKE_CNT,
			B.HIT
		FROM BOARDS B
		LEFT OUTER JOIN USERS U ON B.WRITER_ID = U.ID
		WHERE 
			U.ID = #{id}
		ORDER BY 
			CREATED_AT DESC;
	</select>
	
	<select id="selectBoardsForUserId_Page" resultMap="boardResult">
		SELECT 
			B.ID,
			B.TITLE,
			B.CREATED_AT, 
			U.NICKNAME, 
			B.COMMENT_CNT, 
			B.HIT
		FROM BOARDS B
		LEFT OUTER JOIN USERS U ON B.WRITER_ID = U.ID
		WHERE 
			U.ID = #{id}
		ORDER BY 
			CREATED_AT DESC
		LIMIT ${page}, 5;
	</select>
	
	<select id="selectBoardCount" resultType="_int">
		SELECT COUNT(*)
		FROM BOARDS B
		LEFT OUTER JOIN USERS U ON B.WRITER_ID = U.ID
		WHERE 
			U.NICKNAME like '%${query}%' OR B.TITLE like '%${query}%'
	</select>
	
	<select id="selectBoardCountForUserId" resultType="_int">
		SELECT 
			COUNT(*)
		FROM BOARDS B
		LEFT OUTER JOIN USERS U ON B.WRITER_ID = U.ID
		WHERE 
			U.ID = #{id};
	</select>
	
	<select id="selectLastInsertId" resultType="Integer">
        	SELECT LAST_INSERT_ID();
   	</select>
	
	<update id="updateBoardHit" parameterType="_int">
    	UPDATE BOARDS SET
    	HIT = HIT+1
    	WHERE ID = #{id};
    </update>
    
    <update id="updateBoard">
    	UPDATE BOARDS
    	SET 
    		TITLE = #{title},
    		CONTENT = #{content},
    		UPDATED_AT = now()
    	WHERE 
    		ID = #{id}
    </update>
    
    <update id="updateBoardCommentCnt">
		UPDATE BOARDS
		SET COMMENT_CNT = 
		( SELECT COUNT(ID) FROM COMMENTS WHERE BOARD_ID = #{id} )
		WHERE ID = #{id};
	</update>
	
	<update id="updateBoardLikeCnt">
		UPDATE BOARDS
		SET LIKE_CNT = (SELECT COUNT(*) FROM LIKES WHERE board_id=#{id} AND is_liked = 1 )
		WHERE ID = #{id};
	</update>
	
	<insert id="insertBoard">
		INSERT INTO BOARDS
		(
			TITLE,
			CONTENT,
			WRITER_ID,
			CREATED_AT
		)
		VALUES
		(
			#{title},
			#{content},
			#{writerId},
			now()
		);
	</insert>
	
	<delete id="deleteBoard">
		DELETE FROM BOARDS WHERE ID = #{id}
	</delete>
	
</mapper>